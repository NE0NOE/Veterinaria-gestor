import React, { useState, useEffect } from 'react';
import { MockUser, UserRole } from '../types';
import { getAvailableRoles } from '../services/userService'; // Import roles getter

interface UserModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (user: MockUser) => void;
  userToEdit: MockUser | null;
}

const UserModal: React.FC<UserModalProps> = ({ isOpen, onClose, onSave, userToEdit }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [role, setRole] = useState<UserRole>('client'); // Default role
  const [availableRoles, setAvailableRoles] = useState<UserRole[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    setAvailableRoles(getAvailableRoles());
    if (userToEdit) {
      setUsername(userToEdit.username);
      setRole(userToEdit.role);
      setPassword(''); // Don't pre-fill password for editing
      setError(null);
    } else {
      // Reset form for adding new user
      setUsername('');
      setPassword('');
      setRole('client');
      setError(null);
    }
  }, [userToEdit, isOpen]); // Reset form when modal opens or userToEdit changes

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError(null); // Clear previous errors

    if (!username.trim()) {
        setError("El nombre de usuario es obligatorio.");
        return;
    }
    // Password is required only when adding a new user
    if (!userToEdit && !password) {
        setError("La contraseña es obligatoria para nuevos usuarios.");
        return;
    }

    const userData: MockUser = {
      id: userToEdit ? userToEdit.id : '', // ID will be generated by service if new
      username: username.trim(),
      role: role,
      // Include password only if it's provided (for new user or password change)
      ...(password && { password: password }),
    };

    try {
        onSave(userData); // Let the parent component handle the actual saving logic
        // onClose(); // Close modal on successful save is handled by parent
    } catch (err: any) {
        setError(err.message || "Ocurrió un error al guardar el usuario.");
    }

  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 flex justify-center items-center">
      <div className="relative mx-auto p-8 border w-full max-w-md shadow-lg rounded-md bg-white">
        <button
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-500 hover:text-gray-800"
          aria-label="Cerrar modal"
        >
          &times;
        </button>
        <h3 className="text-2xl font-semibold mb-6 text-center text-gray-800">
          {userToEdit ? 'Editar Usuario' : 'Añadir Usuario'}
        </h3>
        <form onSubmit={handleSubmit} className="space-y-4">
          {error && <p className="text-red-500 text-sm mb-4">{error}</p>}
          <div>
            <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-1">
              Nombre de Usuario
            </label>
            <input
              type="text"
              id="username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md p-2"
              required
            />
          </div>
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
              Contraseña {userToEdit ? '(Dejar en blanco para no cambiar)' : ''}
            </label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md p-2"
              required={!userToEdit} // Required only for new users
            />
          </div>
          <div>
            <label htmlFor="role" className="block text-sm font-medium text-gray-700 mb-1">
              Rol
            </label>
            <select
              id="role"
              value={role}
              onChange={(e) => setRole(e.target.value as UserRole)}
              className="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md p-2 capitalize"
            >
              {availableRoles.map((r) => (
                <option key={r} value={r} className="capitalize">
                  {r}
                </option>
              ))}
            </select>
          </div>
          <div className="flex justify-end pt-4 space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
            >
              Cancelar
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              {userToEdit ? 'Guardar Cambios' : 'Añadir Usuario'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UserModal;
